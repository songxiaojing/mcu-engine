#%d 输出日志时间点的日期或时间,默认格式为 ISO8601,也可以在其后指定格式,比如： %d{yyyy-MM-dd HH:mm:ss},类似： 2007-3-29 17:49:27
#%t 产生该日志事件的线程名; 
#%p 日志的 log_level ，如 DEBUG 、 WARN 或者 INFO;
#%c 输出所属的类目，通常就是所在类的全名，如“ iNotes.Default ”； 
#%m 日志的内容； 
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。如 Test.main(Test.java:33) ； 
#%n 输出一个回车换行符， Windows 平台为“ \r\n ”， Unix 平台为“ \n ” 

#log4j.rootLogger = [ level ] , appenderName, appenderName
log4j.rootLogger=INFO,console

#其中， Log4j 提供的 appender 有以下几种： 
#org.apache.log4j.ConsoleAppender （控制台）， 
#org.apache.log4j.FileAppender （文件）， 
#org.apache.log4j.DailyRollingFileAppender （每天产生一个日志文件）， 
#org.apache.log4j.RollingFileAppender （文件大小到达指定尺寸的时候产生一个新的文件），
#可通过 log4j.appender.R.MaxFileSize=100KB 设置文件大小，
#还可通过 log4j.appender.R.MaxBackupIndex=1 设置为保存一个备份文件。 
#org.apache.log4j.WriterAppender （将日志信息以流格式发送到任意指定的地方） 
#例： 
#log4j.appender.stdout=org.apache.log4j.ConsoleAppender 
#定义一个名为 stdout 的输出目的地， ConsoleAppender 为控制台。 
#其中， Log4j 提供的 layout 有以下几种： 
#org.apache.log4j.HTMLLayout （以 HTML 表格形式布局）， 
#org.apache.log4j.PatternLayout （可以灵活地指定布局模式）， 
#org.apache.log4j.SimpleLayout （包含日志信息的级别和信息字符串）， 
#org.apache.log4j.TTCCLayout （包含日志产生的时间、线程、类别等等信息） 

log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{MM-dd HH:mm:ss} [%F:%L] %-5p %m %n
log4j.appender.console.encoding=UTF-8